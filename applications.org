#-*- mode: org -*-
#+startup: showall
#+title: A NOTE ABOUT APPLICATIONS TO INSTALL BY HAND
#+author: ELISE N
#+date: 2021-10-04 Mon
#+seq_todo: TODO() | IN-PROGRESS() | WAINTING(w) | CANCELLED(c) | DONE(d)
#+options: toc:nil

* Lists 
Course/dotfiles-from-start-to-finish-ish

~/.dotfiles/Brewfile

- [X] tap "homebrew/bundle"
- [X] tap "homebrew/cask"
- [X] brew "bat"
- [X] brew "exa"
- [X] brew "git"
- [X] brew "httpie"
- [ ] cask "alfred"
- [ ] cask "dropbox"
- [ ] cask "gitkraken"
- [ ] cask "google-chrome"
- [ ] cask "visual-studio-code"
- [ ]

* TODO Manually
- [ ] alfred
- [ ] dropbox
- [ ] gitkraken
      + [[https://support.gitkraken.com/how-to-install/]]
- [ ] google-chrome
      + [[https://doc.ubuntu-fr.org/google_chrome]]
      + "Google Chrome est le navigateur internet propriétaire développé par Google sur la base du navigateur libre Chromium.
      Il n'est pas recommandé de l'utiliser, étant donné que des /problèmes de confidentialité sont très présents/.
      Si vous utilisez Google Chrome sur Windows ou macOS,
      utilisez plutôt Chromium, qui récolte moins de données personnelles que Chrome,
      ou encore Firefox, qui ne récolte rien du tout, et qui est le navigateur par défaut d'Ubuntu." 
- [ ]

* Ubuntu Software

Other Software:
- [X] visual-studio-code `code`
      + http://packages.microsoft.com/repos/code stable main
- [X] Regolith-desktop environtment
      + http://ppa.launchpad.net/regolith-linux/release/ubuntu/hirsute main
      + [[https://regolith-linux.org/docs/getting-started/install/#ppa-sources]][Install Regolith]
      + install the standard variant of Regolith Desktop from the release PPA:
        #+begin_src
        $ sudo add-apt-repository ppa:regolith-linux/release
        $ sudo apt install regolith-desktop-standard
        #+end_src
- [X] Chromium Web Browser -via-> snap
      + [[https://doc.ubuntu-fr.org/google_chrome]]
- [X] firefox
- [X] brave-browser
- [X] intellij-idea-community -via-> snap
- [X] atome
- [ ] conda
      + [[https://docs.conda.io/en/latest/]]
- [ ] anaconda
      + [[https://docs.anaconda.com/anaconda/install/index.html]]
- [] vim
- [] emacs
- [] LaTex
- [] TeXstudio
     + [[https://www.texstudio.org/]]
- []
- []

** How to get a list of all repositories and PPAs?
[[https://askubuntu.com/questions/148932/how-can-i-get-a-list-of-all-repositories-and-ppas-from-the-command-line-into-an]]

[[https://askubuntu.com/questions/17823/how-to-list-all-installed-packages]]

- RTFM: `man apt-add-repository'
- RTFM: `man apt'
- SEE ALSO
      + apt-get(8), apt-cache(8), sources.list(5), apt.conf(5), apt-config(8),
      + The APT User's guide in /usr/share/doc/apt-doc/, apt_preferences(5),
      + the APT Howto.
- look into:
  + `/etc/apt/sources.list'
  + `/etc/apt/sources.list.d/'
- `ls -lAFh /usr/local/share'
- `ls -lAFh /etc/apt'

** How to listppa Script to get all the PPA installed on a system ready to share for reininstall?
#+begin_src
# Create shell script fonctions "list-apt-repositories":
# - lists all repisitories in "/ect/sources.list"
# - and "/etc/sources.list.d/*.list"
# - to show only the PPAs: can add `--ppa-only'
# - PPAs are automatically transformed to `ppa:USER/REPO' format

# 1. list_sources
# 2. list_ppa
   
# Make an install script, pipe into another script "make-apt-repository-install-script":
# - generated script supports the `-y/yes' argument for non-interactive use (see `add-apt-repository'(1))
# - xargs -d'\n' printf "add-apt-repository \$y '%s'\n"

#+end_src
** `apt-mark showmanual' will print a list of manually installed packages
[[https://askubuntu.com/questions/17823/how-to-list-all-installed-packages]]

RTFM: `man apt-mark'

To output the result into a text file:

#+begin_src
pwd
cd ~/Desktop
mkdir packages

apt-mark showmanual > ~/Desktop/packages/list-manually-installed.txt

#+end_src

** Apt-Get List Installed Packages - List All Installed Packages with *apt* on Ubuntu

[[https://www.rosehosting.com/blog/list-all-installed-packages-with-apt-on-ubuntu/]]

RTFM: `man apt'

To output the result into a text file:

#+begin_src
pwd
cd ~/Desktop
mkdir packages

sudo apt list --installed > ~/Desktop/packages/list_installed_software_packages_on_ubuntu.txt
#+end_src

1. List the installed software packages on Ubuntu:
   -`sudo apt list --installed'
2. Use the LESS program: to read the entire output
   - `sudo apt list --installed | less
3. Use the GREP command: list all packages that include Apache
   - `sudo apt list --installed | grep -i apache
4. Use the DPKG program: another alternative that list the installed software packages
   on your *Ubuntu VPS* in the *dpkg* command 
   - `sudo dpkg -l'
5. The output of the command *dpkg* will provide information:
   - name of the package
   - version
   - architecture
   - a short description of the package
   - Use the *grep* program to search for a specific package:
     + `sudo dpkg -l | grep -i apache` 

* Welcome to Org mode
[[Quickstart ]][https://orgmode.org/quickstart.html]

* Quickstart
** Preamble
** Heading
** Markup
- *Bold*
- /italic/
- _underline_
- +strikethrough+
- can _/*combine*/_ the basic markup in any order,
- however, ~code~ and =verbatim= need to be the *_~inner-most~_* markers
  if they are present since their contents are interpreted =_literally_=.

#+begin_src
- *Bold*
- /italic/
- _underline_
- +strikethrough+
- can _/*combine*/_ the basic markup in any order,
- however, ~code~ and =verbatim= need to be the *_~inner-most~_* markers
  if they are present since their contents are interpreted =_literally_=.
#+end_src
** Lists
Ordered and unordered bullets can be nested in any order:
- Unordered lists start with `+`, `-`, or `*`[^1].
- Ordered lists start with `1.`, `1)`, `A.`, or `A)`.

Lists can contain checkboxes [ ], [-], [X].
#+begin_src
- [ ] not started
- [-] in progress
- [X] complete

#+end_src

Lists can contains tags (and checkboxes at the same time).
#+begin_src
- [ ] fruits :: get apples
- [ ] veggies :: get carrots

#+end_src
** Links
#+begin_src
[[https://orgmode.org][a nice website]]
[[file:~/Pictures/dank-meme.png]]
[[earlier heading][an earlier heading in the document]]

#+end_src
** Images
#+begin_src
[[https://upload.wikimedia.org/wikipedia/commons/5/5d/Konigsberg_bridges.png]]

#+end_src
** Blocks
** Tables
** Comments
`#`
** Macros

* Repositories and package management
[[https://itsfoss.com/ppa-guide/]][PPA GUIDE]

What is a repository?
A repository is a collection of files that has information about various software:
- their versions and some other details like the checksum.

Each Ubuntu version has its own official set of four repositories:
1. *Main* - Canonical-supported free and open-source software.
2. *Universe* - Community-maintained free and open-source software.
3. *Restricted* - Proprietary drivers for devices.
4. *Multiverse* - Software restrited by copyright or legal issues.

** Linux Package Managers
[[https://www.tecmint.com/linux-package-managers/]][linux-package-managers]

DPKG (Debian Package Management System):
- Dpkg is a base package management system for the Debian Linux family.
- it is used to install, remove, store and provide information about `.deb packages`.
- a low-level tool and there are front-end tools that help users to obtain packages from
  remote repositories and/or handle complex package relations and these include:
  + APT (Advanced Package Tool):
    + useful command line package management system that is a front end for dpkg package management system.
    + Users of Debian or its derivatives such as Ubuntu and Linux Mint should be familiar with this package management tool.
  + Aptitude Package Manager:
    + command line front-end package management tool for Debian Linux family, it works similar to APT 
    + It was initially built for Debian and its derivatives but now its functionality stretches to RHEL family as well.
  + Synaptic Package Manager:
    Synaptic is a GUI package management tool for APT based on GTK+ and
    it works fine for users who may not want to get their hands dirty on a command line.
    It implements the same features as apt-get command line tool.


** `sudo apt` vs `sudo apt-get`

** Ubuntu Snap vs Apt vs Flatpak

[[https://snapcraft.io/about]][snapcrat]

What is Snap?
- Snap is developed by *Canonical* for *operating systems* that use
  the *Linux* kernel. The packages, called /snaps/.
- Snap is *a software package and deployment system* that uses
  self-contained packages called snaps to deliver software to users.
- Snap enables developpers to deliver their apps directly to users via Snap Store.  

What is apt?
- APT mostly obains packages from a distribution's official repositories.

[[https://help.ubuntu.com/stable/ubuntu-help/addremove-ppa.html.en]][Add a Personal Package Archive (PPA)]

[[https://itsfoss.com/ppa-guide/]][Using PPA in Ubuntu Linux]

What is PPA?
- Personal Package Archives (PPAs) are software repositories designed for
  Ubuntu users and are easier to install than other third-party repositories.
  PPAs are often used to distribute pre-release software so that it can be tested. 
- The PPA allows application developers and Linux users to create their own repositories to distribute software.
  With PPA, you can easily get newer software version or software that are not available
  via the official Ubuntu repositories.

What is Flatpak?

** External sources, PPAs or packages downloaded from websites
[[https://askubuntu.com/questions/1179175/are-snap-and-flatpak-apps-safe-to-install-are-they-official-approved-or-test]][are snap and flatpak apps safe to install]
- Are Snap and Flatpak apps safe to install?
- Official repos for such:
  + Snaps have the https://snapcraft.io/ repo.
    This is run by Canonical, the same people that build Ubuntu.
  + Flatpaks have an official repo at https://flathub.org/ . 
    Flatpaks were developed by Redhat but I don't know if they manage the flathub repo or not.
- Stability, maintained by ?
- Update, upgrade?
- Run slowly or fast?
- Location? Where applications are stored by them?

* Via Ubuntu Package manager
GNU/Linux Debian and Ubuntu based distributions

** How to install
#+begin_src
sudo updatedb
sudo apt-get update
apt search <package name>
apt show <package name>
apt list

sudo apt-get install <package name>
# or
sudo apt install <package name>

#+end_src

* Via Snap
[[https://snapcraft.io/code]]

E.g: Visual Studio Code is officially distributed as a Snap package in the Snap Store:

- `snap list`
- RTFM: `man snap`

** How to install
#+begin_src
sudo snap install --classic code # or code-insiders

#+end_src

* Via PPA
Installing Visual Studio Code with `apt`

Download and install the `.deb package (64-bit)` from official software website:

** How to install
[[https://code.visualstudio.com/docs/setup/linux]][Visual Studio Code on Linux]

[[https://doc.ubuntu-fr.org/visual_studio_code]][Wiki ubuntu-fr | Installation | Visual Studio Code]

E.g: The easiest way to install Visual Studio Code for Debian/Ubuntu based distributions is to
download and install the `.deb package (64-bit)`, either through the graphical software center
if it's available,or through the command line with:

Installing the .deb package will automatically install the apt repository and
signing key to enable auto-updating using the system's package manager.
Alternatively, the repository and key can also be installed manually with the following script:

#+begin_src
pwd
# `~` : Home folder, current users home directory.
cd ~    # or `cd`
# Create a `src/` directory to store applications to install/uninstall/remove manually
mkdir ~/src/
cd ~/src/

#+end_src

#+begin_src
sudo apt install ./<file>.deb

# If you're on an older Linux distribution, you will need to run this instead:
# sudo dpkg -i <file>.deb
# sudo apt-get install -f # Install dependencies

#+end_src

* Via ISO installs

* Via `git clone` source code

* Footnotes:
[^1] `*` cannot be used to start a plain list if it is immediatly
preceded by a newline because it will be interpreted as a heading.